import streamlit as st
import plotly.express as px
import pandas as pd

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ CSS –¥–ª—è —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º
light_theme = """
<style>
.main {
    background-color: #f5f5f5;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    background: linear-gradient(to right, #ffffff, #C5A78B);
}
.stApp {
    background: linear-gradient(to right, #ffffff, #35332Cb);
    padding: 10px;
}
.stButton>button {
    color: black;
    background-color: transparent;
    border: none;
    font-size: 24px;
}

.stHeader, .stSubheader, .stText {
    color: #1f77b4;
}

a {
    color: #a88f77; /* –¶–≤–µ—Ç —Å—Å—ã–ª–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–º–∞—Ç–Ω—ã–π) */
}

a:hover {
    color: #a47a61; /* –¶–≤–µ—Ç —Å—Å—ã–ª–æ–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π) */
}
</style>
"""

dark_theme = """
<style>
.main {
    background-color: #0e1117;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    background: linear-gradient(to right, #000000, #050520);
}
.stApp {
    background_gradient: linear-gradient(to right, #000000, #050520);
    padding: 10px;
}
.stButton>button {
    color: white;
    background-color: transparent;
    border: none;
    font-size: 24px;
}
.stHeader, .stSubheader, .stText {
    color: #0e1117;
}

a:hover {
    color: #1f212e; /* –¶–≤–µ—Ç —Å—Å—ã–ª–æ–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π) */
}
</style>
"""

if 'theme' not in st.session_state:
    st.session_state.theme = 'light'

def switch_theme():
    if st.session_state.theme == 'light':
        st.session_state.theme = 'dark'
    else:
        st.session_state.theme = 'light'

if st.session_state.theme == 'light':
    st.button('‚òÄÔ∏è', on_click=switch_theme)
else:
    st.button('üåô', on_click=switch_theme)

if st.session_state.theme == 'light':
    st.markdown(light_theme, unsafe_allow_html=True)
    photo_path = "path_to_light_theme_photo.jpg"
else:
    st.markdown(dark_theme, unsafe_allow_html=True)
    photo_path = "path_to_dark_theme_photo.jpg"

st.title("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?")

col1, col2 = st.columns([1, 2])

with col1:
    st.image(photo_path, width=200)  
with col2:

    st.write("""
 –ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–∞–ª–∫–∏–Ω–∞ –Æ–ª–∏—è –∏ —è —Å—Ç—É–¥–µ–Ω—Ç–∫–∞ –ù–ì–¢–£ –∏–º. –†.–ï. –ê–ª–µ–∫—Å–µ–µ–≤–∞. –û–±—É—á–∞—é—Å—å –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞" –ø—Ä–æ—Ñ–∏–ª—è "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º". 
""")
    
st.write("""
**–ú–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:**
- ML-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ Data Science
- –ò–∑—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ Data Mining –∏ Text Mining
- –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π: RNN, CNN
- –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü, –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤, —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏: Pandas, NumPy, Matplotlib, Seaborn, Scikit Learn, TensorFlow, Keras

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
- –ê–∫—Ç–∏–≤–∏—Å—Ç —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
- –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å SMM-—Å–µ–∫—Ç–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞
- –ò–º–µ–µ—Ç—Å—è –æ–ø—ã—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
- –ó–Ω–∞–Ω–∏t –Ω–µ–º–µ—Ü–∫–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ B1
- –ï—Å—Ç—å –Ω–∞—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π –ø—Ä–∞–∫—Ç–∏–∫—É–º –ø–æ –∫—É—Ä—Å—É ¬´–°–µ—Ç–∏ –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏¬ª"
""")

st.markdown("<hr>", unsafe_allow_html=True)

st.header("–ü—Ä–æ–µ–∫—Ç—ã")
st.write("–•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∏–∑ –º–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:")
project_options = {
    "–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ deepface": {
        "–û–ø–∏—Å–∞–Ω–∏–µ": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ª—é–¥–µ–π, –∞ —Ç–∞–∫–∂–µ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ (—ç–º–æ—Ü–∏–∏, –≤–æ–∑—Ä–∞—Å—Ç, –≥–µ–Ω–¥–µ—Ä–Ω–∞—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å)",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "Python, deepface, OpenCV",
        "–°—Å—ã–ª–∫–∞": "https://github.com/cranberriess/face-recognition-deepface"
    },
    "–ê–Ω–∞–ª–∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –∞–ª–º–∞–∑–æ–≤ –∏ –∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã": {
        "–û–ø–∏—Å–∞–Ω–∏–µ": "–ü—Ä–æ–µ–∫—Ç, –≤–∫–ª—é—á–∞—é—â–∏–π –≤ —Å–µ–±—è: –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∞–ª–º–∞–∑–æ–≤, –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—Ä–µ–π–º–∞, –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∞–ª–º–∞–∑—ã",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "Python, NumPy, Plotly, TensorFlow, Keras",
        "–°—Å—ã–ª–∫–∞": "https://github.com/cranberriess/diamonds-data-mining"
    },
    "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ GRU": {
        "–û–ø–∏—Å–∞–Ω–∏–µ": "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ GRU (Gated Recurrent Unit)",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "Python, numpy, tensorflow",
        "–°—Å—ã–ª–∫–∞": "https://github.com/cranberriess/text-generation-GRU"
    },
    "–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ": {
        "–û–ø–∏—Å–∞–Ω–∏–µ": "–õ–∞—Ç–µ–Ω—Ç–Ω–æ–µ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –î–∏—Ä–∏—Ö–ª–µ –¥–ª—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç–∞—Ç–µ–π",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "Python, Pandas, pymorphy2, nltk, genism, matplotlib, pyLDAvis",
        "–°—Å—ã–ª–∫–∞": "https://github.com/cranberriess/thematic-modeling"
    },
    "–ú–µ—Ç–æ–¥ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ sklearn": {
        "–û–ø–∏—Å–∞–Ω–∏–µ": "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é PCA –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ sklearn –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é 3—Ö10 (–≤–æ–∑—Ä–∞—Å—Ç, —Ä–∞–∑–º–µ—Ä –æ–±—É–≤–∏, –≤–µ—Å) –∏ –≤—Ä—É—á–Ω—É—é.",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "Python, Pandas, NumPy, PSA",
        "–°—Å—ã–ª–∫–∞": "https://github.com/cranberriess/PCA-test"
    },

    "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Å –ø–æ–º–æ—â—å—é Streamlit": {
        "–û–ø–∏—Å–∞–Ω–∏–µ": "–≠—Ç–æ—Ç —Å–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ",
        "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "Python, Streamlit",
        "–°—Å—ã–ª–∫–∞": "https://github.com/cranberriess/streamlit-portfolio"
    }
}

selected_project = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç", list(project_options.keys()))

project_info = project_options[selected_project]
st.subheader(selected_project)
st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:**\n{project_info['–û–ø–∏—Å–∞–Ω–∏–µ']}")
st.write(f"**–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**\n{project_info['–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏']}")
st.write(f"**–°—Å—ã–ª–∫–∞:**\n[{project_info['–°—Å—ã–ª–∫–∞']}]({project_info['–°—Å—ã–ª–∫–∞']})")

st.markdown("<hr>", unsafe_allow_html=True)

st.header("–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏")
skills = {
    "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è": 80,
    "–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞": 75,
    "–ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å": 85,
    "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ": 70,
    "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": 80,
    "–õ–∏–¥–µ—Ä—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏": 85,
    "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å": 90
}

for skill, proficiency in skills.items():
    st.write(f"{skill}: {'‚òÖ' * (proficiency // 10)}{'‚òÜ' * (10 - proficiency // 10)}")
    
st.markdown("<hr>", unsafe_allow_html=True)

st.header("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏")
prof = {
    "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω": 80,
    "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ": 80,
    "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö": 85,
    "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö": 90,
    "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö": 75,
    "–†–∞–±–æ—Ç–∞ —Å –ø–∞–∫–µ—Ç–æ–º MS Office": 95,
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ WEB-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π": 70,
    "–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ç–∏": 65
}

prof_df = pd.DataFrame(list(prof.items()), columns=['–ù–∞–≤—ã–∫', '–£—Ä–æ–≤–µ–Ω—å'])

fig = px.scatter(prof_df, x='–£—Ä–æ–≤–µ–Ω—å', y='–ù–∞–≤—ã–∫', orientation='h', labels={'–£—Ä–æ–≤–µ–Ω—å': '–ü—Ä–æ—Ü–µ–Ω—Ç'})
if st.session_state.theme == 'light':
    fig.update_layout(
     plot_bgcolor='#ffffff',  
     paper_bgcolor='#ffffff'  
    )
    fig.update_traces(marker=dict(color='#a47a61'))
else: 
    fig.update_layout(
        plot_bgcolor='#050520',  
        paper_bgcolor='#050520' 
    )

st.plotly_chart(fig)

st.markdown("<hr>", unsafe_allow_html=True)

st.header("–ö–æ–Ω—Ç–∞–∫—Ç—ã")
st.write("""
–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±—É–¥—É –∂–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:

üìß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞: [julija_galkina613348@mail.ru](mailto:julija_galkina613348@mail.ru)

üí¨ Telegram: [https://t.me/rar_rosenrot](https://t.me/rar_rosenrot)

üêô GitHub: [https://github.com/cranberriess](https://github.com/cranberriess)
""")